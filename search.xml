<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[CocosCreator 集成 AnySDK 教程]]></title>
      <url>http://eddy.wiki/2016-10-23-creator-anysdk.html</url>
      <content type="text"><![CDATA[本文主要介绍怎么在 CocosCreator 项目中集成 AnySDK 。 本人开发环境CocosCreator 1.1.1, AnySDK 2.1.2, AnySDK_Framework_JS_Android_2.1.2, MacOS 10.10.3 Android 平台集成 AnySDK 详细步骤由于本人使用 git 对项目进行版本控制管理，所以下列步骤中会有一些与 git 相关的操作。如果你没有使用 git，那么你可以直接忽略下列步骤中与 git 相关的操作。 获取 AnySDK Framework安装 AnySDK 客户端，然后在 AnySDK 客户端的【安妮市场】【分类】【框架】中找到 JS(Android) 框架并下载。如下图： 下载完成后打开 JS(Android) 框架文件夹即可看到 AnySDKFiles/Store/Frameworks/AnySDK_Framework_JS_Android_2.1.2/AnySDK_Framework_JS(Android)/ 这样的目录。如下图： 下文统一使用 AnySDK_Framework_JS(Android) 指代 AnySDK Framework 文件目录。 构建并编译 CocosCreator 项目下文使用 your-proj 指代你的 CocosCreator 项目路径。 修改项目中的 gitignore 文件。删除 your-proj/.gitignore 文件中以下路径： build/ 在 your-proj/.gitignore 文件中添加以下路径： build/jsb-default/src/ build/jsb-default/res/ build/jsb-default/publish/ build/jsb-default/simulator/ build/jsb-default/frameworks/runtime-src/proj.android/bin/ build/jsb-default/frameworks/runtime-src/proj.android/gen/ build/jsb-default/frameworks/runtime-src/proj.android/obj/ build/jsb-default/frameworks/runtime-src/proj.android/assets/ build/jsb-default/frameworks/cocos2d-x/cocos/platform/android/java/bin/ build/jsb-default/frameworks/cocos2d-x/cocos/platform/android/java/gen/ 构建发布 Android 平台使用 CocosCreator 打开项目，点击 【项目】【构建发布】，发布平台选择 “Android”， 模板选择 “default”。然后点击 “构建”按钮 对项目进行构建。构建完毕会在 your-proj 目录下生成一个 build/jsb-default/ 目录。 构建完成后，点击 “编译”按钮 对项目进行编译，编译过程大概20分钟左右。编译完成后，安装编译生成的 apk 到手机上查看是否运行正常。 如果在构建和编译过程中出现错误，请参考 CocosCreator 官方的跨平台发布游戏文档。 注意：该步骤中的编译操作并不是必须的，只是为了保证你的编译发布 Android 平台相关开发环境已经配置完成。这样在集成 AnySDK 的出现错误的时候，就可以排除开发环境配置相关的问题了。 获取 anysdk jsb 绑定文件添加 anysdk jsb 文件在 build/jsb-default/frameworks/cocos2d-x/ 目录下新建 anysdk 文件夹，然后拷贝 AnySDK_Framework_JS(Android)/ 目录下的 src 文件夹到新建的 anysdk 文件夹中。 修改 build-cfg.json 文件在 build/jsb-default/frameworks/runtime-src/proj.android/build-cfg.json 文件中添加： 1234&#123; "from": "../../cocos2d-x/anysdk/src", "to": ""&#125; 如下图，注意：不要遗漏了添加代码前面分隔的逗号 “,”。 修改 jsb.js 文件在 build/jsb-default/frameworks/cocos2d-x/cocos/scripting/js-bindings/script/jsb.js 文件中添加： 1234567891011if (jsb.fileUtils.isFileExist('jsb_anysdk_constants.js') || jsb.fileUtils.isFileExist('jsb_anysdk_constants.jsc')) &#123; if (cc.sys.os == cc.sys.OS_IOS || cc.sys.os == cc.sys.OS_ANDROID) &#123; require('jsb_anysdk_constants.js'); &#125;&#125;if (jsb.fileUtils.isFileExist('jsb_anysdk.js') || jsb.fileUtils.isFileExist('jsb_anysdk.jsc')) &#123; if (cc.sys.os == cc.sys.OS_IOS || cc.sys.os == cc.sys.OS_ANDROID) &#123; require('jsb_anysdk.js'); &#125;&#125; 如下图 拷贝anysdk framework stl库添加 protocols 文件首先，查看所接入项目的 build/jsb-default/frameworks/runtime-src/proj.android/jni/application.mk 文件第一行找到 stl 库类型设置。 如下： APP_STL := gnustl_static 然后，进入所接入项目的 build/jsb-default/frameworks/runtime-src/proj.android 目录，新建 protocols 文件夹。根据上面查看到的stl类型，选取 AnySDK_Framework_JS(Android)/framework/protocols_gnustl_static/ 库，然后将该目录下的 android 和 include 文件夹拷贝到 protocols 目录下。 添加 libPluginProtocol.jar 文件在 build/jsb-default/frameworks/runtime-src/proj.android/ 目录下新建 libs 文件夹，然后将 build/jsb-default/frameworks/runtime-src/proj.android/protocols/android 目录下的 libPluginProtocol.jar 文件移到 libs 目录下。 添加 res 文件将 AnySDK_Framework_JS(Android)/framework/protocols_gnustl_static/ 目录下的 res 文件夹，拷贝到 build/jsb-default/frameworks/runtime-src/proj.android/ 目录下，注意选择合并，避免文件覆盖。 添加 Classes 文件由于 CocosCreator 1.1.1 使用的是 lite 版本引擎，所以不能使用 AnySDK_Framework_JS(Android)/3.10及以上/ 目录下的文件。请下载 anysdk-files-for-ccc，然后把 anysdk-files-for-ccc/build/jsb-default/frameworks/runtime-src/Classes/ 目录下的所有文件（除 AppDelegate.cpp 外），拷贝到 build/jsb-default/frameworks/runtime-src/Classes 目录下。 修改 AppDelegate.cpp 文件在 build/jsb-default/frameworks/runtime-src/Classes/AppDelegate.cpp 文件中添加： 12345#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS)#include "jsb_anysdk_basic_conversions.h"#include "jsb_anysdk_protocols_auto.hpp"#include "manualanysdkbindings.hpp"#endif 1234#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS) sc-&gt;addRegisterCallback(register_all_anysdk_framework); sc-&gt;addRegisterCallback(register_all_anysdk_manual);#endif 如下图 修改 Android.mk 文件在 build/jsb-default/frameworks/runtime-src/proj.android/jni/Android.mk 文件中添加： 1$(call import-add-path,$(LOCAL_PATH)/../) 1234../../Classes/jsb/jsb_creator_auto.cpp \../../Classes/jsb_anysdk_basic_conversions.cpp \../../Classes/jsb_anysdk_protocols_auto.cpp \../../Classes/manualanysdkbindings.cpp 1LOCAL_WHOLE_STATIC_LIBRARIES := PluginProtocolStatic 1$(call import-module, protocols/android) 如下图，注意：记得在 ../../Classes/AppDelegate.cpp 后添加 “\”。 修改 main.cpp 文件在 build/jsb-default/frameworks/runtime-src/proj.android/jni/hellojavascript/main.cpp 文件中添加： 1#include "PluginJniHelper.h" 1using namespace anysdk::framework; 123JavaVM* vm;env-&gt;GetJavaVM(&amp;vm);PluginJniHelper::setJavaVM(vm); 如下图 修改 AndroidManifest.xml 文件在 build/jsb-default/frameworks/runtime-src/proj.android/AndroidManifest.xml 文件中添加 AnySDK 所需要的权限： 1234567&lt;!-- for anysdk start --&gt;&lt;uses-permission android:name="android.permission.INTERNET" /&gt;&lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;&lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE" /&gt;&lt;uses-permission android:name="android.permission.RESTART_PACKAGES" /&gt;&lt;uses-permission android:name="android.permission.KILL_BACKGROUND_PROCESSES" /&gt;&lt;!-- for anysdk end --&gt; 如下图 修改 AppActivity.java 文件在 build/jsb-default/frameworks/runtime-src/proj.android/src/org/cocos2dx/javascript/AppActivity.java 添加： 123import com.anysdk.framework.PluginWrapper;import android.content.Intent; import android.os.Bundle; 1PluginWrapper.init(this); // for plugins 1234567891011121314151617181920212223242526272829303132333435363738394041@Overrideprotected void onDestroy() &#123; PluginWrapper.onDestroy(); super.onDestroy();&#125;@Overrideprotected void onPause() &#123; PluginWrapper.onPause(); super.onPause();&#125;@Overrideprotected void onResume() &#123; PluginWrapper.onResume(); super.onResume();&#125;@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; PluginWrapper.onActivityResult(requestCode, resultCode, data); super.onActivityResult(requestCode, resultCode, data);&#125;@Overrideprotected void onNewIntent(Intent intent) &#123; PluginWrapper.onNewIntent(intent); super.onNewIntent(intent);&#125;@Overrideprotected void onStop() &#123; PluginWrapper.onStop(); super.onStop();&#125;@Overrideprotected void onRestart() &#123; PluginWrapper.onRestart(); super.onRestart();&#125; 如下图 在项目中使用AnySDK获取 AnySDK 参数打开 AnySDK 客户端，点击 【打包工具】【游戏列表】【添加游戏】来在 AnySDK 客户端添加游戏项目。添加成功后，就可以获取到使用 AnySDK 需要的参数：appKey、appSecret、privateKey。 在项目中添加 AnySDK 功能代码下面给出了我在使用 AnySDK 用过的相关功能代码供大家参考。AnySDK 具体用法请参考官方的客户端接入（JS）文档。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081// 初始化AnySDkinitAnySDK: function () &#123; cc.log("WelcomeScreen.initAnySDK()"); if (cc.sys.isMobile) &#123; //注意：这里appKey, appSecret, privateKey，要替换成自己打包工具里面的值(登录打包工具，游戏管理界面上显示的那三个参数)。 var appKey = "23BEE66E-48A1-9BF0-CF4A-4DA25FF54082"; var appSecret = "b3d0c6f406c1f7d097f2036f445589b4"; var privateKey = "FC69F26761B6C3BEDFCDA8A2D248CC45"; var oauthLoginServer = "http://oauth.anysdk.com/api/OauthLoginDemo/Login.php"; var agent = anysdk.agentManager; //init agent.init(appKey, appSecret, privateKey, oauthLoginServer); //load agent.loadAllPlugins(); // 开启统计 cc.log("analytics_plugin.startSession();"); var analytics_plugin = anysdk.agentManager.getAnalyticsPlugin(); if (analytics_plugin) &#123; analytics_plugin.startSession(); &#125; // 开启推送服务 cc.log("push_plugin.startPush();"); var push_plugin = anysdk.agentManager.getPushPlugin(); if (push_plugin) &#123; push_plugin.startPush(); &#125; &#125;&#125;,// 显示横幅广告showBannerAd: function () &#123; cc.log("WelcomeScreen.showBannerAd()"); if (cc.sys.isMobile) &#123; var ads_plugin = anysdk.agentManager.getAdsPlugin(); if (ads_plugin.isAdTypeSupported(anysdk.AdsType.AD_TYPE_BANNER)) &#123; ads_plugin.showAds(anysdk.AdsType.AD_TYPE_BANNER); &#125; &#125;&#125;,// 显示插屏广告showFullScreenAd: function () &#123; cc.log("showFullScreenAd()"); if (cc.sys.isMobile) &#123; var ads_plugin = anysdk.agentManager.getAdsPlugin(); if (ads_plugin.isAdTypeSupported(anysdk.AdsType.AD_TYPE_FULLSCREEN)) &#123; ads_plugin.showAds(anysdk.AdsType.AD_TYPE_FULLSCREEN); &#125; &#125;&#125;,// 统计事件logEvent: function () &#123; cc.log("logEvent()"); if (cc.sys.isMobile) &#123; var analytics_plugin = anysdk.agentManager.getAnalyticsPlugin(); if (analytics_plugin) &#123; analytics_plugin.logEvent("click_logevent_btn") &#125; &#125;&#125;,// 退出游戏onExitBtnClicked: function () &#123; cc.log("onExitBtnClicked()"); // 关闭统计 cc.log("analytics_plugin.stopSession();"); if (cc.sys.isMobile) &#123; var analytics_plugin = anysdk.agentManager.getAnalyticsPlugin(); if (analytics_plugin) &#123; analytics_plugin.stopSession(); &#125; // 在游戏结束或者适当的时候，调用unloadAllPlugins来卸载SDK插件 anysdk.agentManager.unloadAllPlugins(); &#125; cc.director.end();// 退出游戏&#125; 在项目中添加了 AnySDK 相关功能代码后，使用 CocosCreator 编译出 Android APK 母包。 生成渠道包在 AnySDK 客户端配置好游戏的渠道、SDK等参数，然后使用上一步骤编译出来的 Android APK 母包生成集成了 SDK 的渠道包。 在这里就不详细说明 AnySDK 客户端的使用了，详情请参考 AnySDK 的官方文档。 如何快速集成 AnySDK我在 GitHub 上面分享了一个便于在 CocosCreator 项目的 Android 平台快速集成 AnySDK 的项目：anysdk-files-for-ccc 。具体使用方法请参考该项目的 README.md 文件，这里就不详细说明了。 总结本文主要讲解了如何在 CocosCreator 项目的 Android 平台集成 AnySDK ，并提供了一个快速集成方法。ios 平台请参考 AnySDK 的官方文档自行尝试。 本文出自 Eddy Wiki 转载请注明出处：http://eddy.wiki/2016-10-23-creator-anysdk.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CocosCreator 集成 Pomelo 教程]]></title>
      <url>http://eddy.wiki/2016-10-23-creator-pomelo.html</url>
      <content type="text"><![CDATA[本文主要介绍怎么在 CocosCreator 中集成 Pomelo， 以及使用CocosCreattor + Pomelo 开发一个多人聊天应用。 使用 Pomelo 官方多人聊天 demo（下文统一称为 pomelo-chat-demo）的服务端代码作为本多人聊天应用的服务端，而本聊天应用客户端（下文统一称为 ccc-pomelo-chat-client）则是参考 pomelo-chat-demo 的web客户端使用CocosCreattor实现。 怎么运行ccc-pomelo-chat-client本人开发环境CocosCreator 1.1, Pomelo 1.2.2, MacOS 10.10.3 安装 pomelo参考 安装 pomelo wiki 安装 pomelo。 pomelo-chat-demo 源码下载与运行ccc-pomelo-chat-client 服务端使用的是 pomelo-chat-demo 的服务端，并没有另外开发，这样可以很方便的展示多人聊天应用的多端（Web, Android, desktop等）聊天通讯功能。 参考 pomelo chat 源码下载与安装 wiki 下载 pomelo-chat-demo 源码。 下载源码后，通过下列步骤来运行 pomelo-chat-demo。下文使用 yourdir 指代你本地 pomelo-chat-demo 源码的存放目录。 打开终端，启动 pomelo-chat-demo 的聊天服务器。 $ cd yourdir/chatofpomelo-websocket/game-server $ pomelo start 打开另外一个终端，启动 pomelo-chat-demo 的 web 服务器。 $ cd yourdir/chatofpomelo-websocket/web-server $ node app.js 如果启动过程中没有错误，那么我们就可以打开浏览器，输入 http://127.0.0.1:3001/index.html, 然后就可以看到聊天应用的界面了。输入一个用户名和一个房间名，就可以开始聊天了。可以多开几个客户端实例（即打开多个网页），测试 pomelo-chat-demo 是否能正常地运行。效果图如下： 那么怎么关闭 pomelo-chat-demo 的聊天服务器呢，其实很简单。打开另外一个终端 $ cd yourdir/chatofpomelo-websocket/game-server $ pomelo stop 或 pomelo kill 注意：如果不是按以上步骤关闭聊天服务器，那么当你再次启动聊天服务器的时候，就有可能因为聊天服务器未完全关闭而出现错误。出现这种情况可以直接关闭启动聊天服务器的终端（这样聊天服务器就被完全关闭了），然后重新打一个终端启动聊天服务器。 ccc-pomelo-chat-client源码下载与运行下文使用 yourdir 指代你本地 ccc-pomelo-chat-client 源码的存放目录。 从GitHub上下载 ccc-pomelo-chat-client 源码。 $ cd yourdir $ git clone https://github.com/eddy2015/ccc-pomelo-chat-client.git 使用 CocosCreator 打开 ccc-pomelo-chat-client 项目并运行预览（模拟器和浏览器都行），效果图如下： 经本人测试，该客户端在web、Android、ccc模拟器都可以正常运行，其他平台请自行尝试。服务器 ip 地址默认为 127.0.0.1，如果你是在 Android 等其他不和服务器同一台机器平台运行，请把该 ip 修改成你启动服务器的电脑 ip 地址。端口默认为 3014，这个一般不需要修改，除非你改动了服务器端的代码。输入一个用户名和一个房间名（用户名和房间名限制了只能是字母、数字、或汉字），然后点击 join 按钮登陆后就可以进行一对多或者一对一聊天了。 CocosCreator 怎么集成 pomelo集成 pomelo 步骤下载 ccc-pomelo-chat-client 源码，把源码中的 ccc-pomelo-chat-client/assets/pomelo 拷贝到你的 CocosCreator 项目 assets 目录下，这样在你的项目中即可使用 pomelo-client 相关 API 了。 API请阅读 pomelo/pomelo-client.js 源码，具体使用方法可以参考 ccc-pomelo-chat-client 源码，或者参考以下网址： pomelo 官方中文 wiki pomelo-chat-demo 源码 pomelo 客服端开发 集成后的会出现的一些警告CocosCreator 项目集成 pomelo 后，你会在 CocosCreator 编辑器中看到如下的红色错误信息： 12Simulator : mutating the [[Prototype]] of an object will cause your code to run very slowly; instead create the object with the correct initial [[Prototype]] value using Object.create at a: &quot;Buffer.prototype.__proto__ = Uint8Array.prototype&quot; (../../../../../../../Applications/CocosCreator.app/Contents/Resources/app.asar/node_modules/buffer/index.js:153) 或者在 web 上运行时，看到下列警告信息： 1mutating the [[Prototype]] of an object will cause your code to run very slowly; instead create the object with the correct initial [[Prototype]] value using Object.create 以上的警告信息并不影响 pomelo 的使用。由于本人水平有限，所以暂时没有解决该警告问题，如果各位有解决方法，请指出。 该 CocosCreator pomelo 库由来由于前一段时间对 pomelo 比较感兴趣，所有就去了解了一下。最近也一直在关注 CocosCreator，看到论坛有不少人问 CocosCreator 是否能集成pomelo。根据我个人的理解：CocosCreator 实现了 websocket 的跨平台封装；而 pomelo 也有基于 websocket 的客户端实例。因此，CocosCreator 集成 pomelo 应该不会有什么问题的。刚好端午节有空就尝试集成了一下，然后就有了这篇文章和 ccc-pomelo-chat-client。 ccc-pomelo-chat-client 中的 pomelo 库生成过程： 拷贝 chatofpomelo-websocket/web-server/public/js/lib/components/component-emitter/index.js 文件并修改文件名为 emitter.js，在 emitter.js 文件的 module.exports = Emitter; 代码后面添加 window.EventEmitter = Emitter; 代码。 拷贝 chatofpomelo-websocket/web-server/public/js/lib/components/NetEase-pomelo-protocol/lib/protocol.js 文件。 拷贝 chatofpomelo-websocket/web-server/public/js/lib/components/pomelonode-pomelo-protobuf/lib/client/protobuf.js 文件。 拷贝 chatofpomelo-websocket/web-server/public/js/lib/components/pomelonode-pomelo-jsclient-websocket/lib/pomelo-client.js 文件，并使用 cc.log、 cc.error 替换文件中的 console.log、console.error。 最后这是我博客的第一篇博文（除了 HelloWord 外^_^），希望大家喜欢。由于本人水平有限，文章中难免错漏之处，请各位不吝指正。 本文出自 Eddy Wiki 转载请注明出处：http://eddy.wiki/2016-10-23-creator-pomelo.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://eddy.wiki/2016-10-23-hello-world.html</url>
      <content type="text"><![CDATA[欢迎来到本博客！本博客永久地址为：http://eddy.wiki]]></content>
    </entry>

    
  
  
</search>
